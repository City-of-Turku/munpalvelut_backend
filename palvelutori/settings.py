"""
Django settings for palvelutori project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os

def str2bool(v):
  return str(v).lower() in ("yes", "true", "t", "1")

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

DEBUG = str2bool(os.environ.get('PALVELUTORI_DEBUG', False))

ALLOWED_HOSTS = os.getenv('PALVELUTORI_ALLOWED_HOSTS', '').split()

SECRET_KEY = os.getenv('PALVELUTORI_SECRET_KEY')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_ENV_POSTGRES_DB', 'postgres'),
        'USER': os.getenv('POSTGRES_ENV_POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_ENV_POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.getenv('POSTGRES_PORT_5432_TCP_ADDR', 'localhost'),
        'PORT': os.getenv('POSTGRES_PORT_5432_TCP_PORT', '5432')
    }
}

MAX_IMAGE_SIZE = (1280, 960)
ACCEPTED_IMAGE_FORMATS = ('png', 'jpeg', 'jpg', 'gif')

# Email

FEEDBACK_EMAIL = 'test@example.org' # Where to send the feedback form

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_swagger',
    'crispy_forms',

    'palvelutori',
    'api',
    'logger',
    'services',
    'organisation',
    'calendars',
    'media',
    'orders',
    'mailer',
    'feedback',
    'ytr',
    'demodump',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'palvelutori.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'palvelutori.wsgi.application'

# A customized test runner that isolates MEDIA_ROOT
TEST_RUNNER = 'palvelutori.testrunner.MediaTestRunner'

# Test external examples (requires bash)
TEST_EXAMPLES = True

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'palvelutori.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.auth.TokenAndKeyAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
}

# Settings for generating a database dump for pilot/dev environment
PILOT_DUMP = {
    'exclude': ['sessions.Session', 'api.ApiKey', 'api.AuthToken', 'logger'],
    }

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'),)

LANGUAGE_CODE = 'en-us'
LANGUAGES = (
    ('en', 'English'),
    ('fi', 'Finnish'),
    ('sv', 'Swedish'),
)

TIME_ZONE = os.getenv('PALVELUTORI_TIME_ZONE', 'Europe/Helsinki')

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = os.getenv('PALVELUTORI_STATIC_URL', '/static/')
STATIC_ROOT = os.environ.get('PALVELUTORI_STATIC_ROOT', os.path.join(BASE_DIR, 'files/static'))

MEDIA_URL = os.getenv('PALVELUTORI_MEDIA_URL', '/media/')
MEDIA_ROOT = os.environ.get('PALVELUTORI_MEDIA_ROOT', os.path.join(BASE_DIR, 'files/media'))

INTERNAL_IPS = os.getenv('PALVELUTORI_INTERNAL_IPS', '::ffff:172.17.0.1').split()

EMAIL_BACKEND = os.getenv('PALVELUTORI_EMAIL_BACKEND', 'django.core.mail.backends.filebased.EmailBackend')
EMAIL_FILE_PATH = os.getenv('PALVELUTORI_EMAIL_FILE_PATH', os.path.join(BASE_DIR, 'logs/mail'))

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s.%(funcName)s: %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        #'logfile': {
            #'level': 'INFO',
            #'class': 'logging.handlers.TimedRotatingFileHandler',
            #'formatter': 'simple',
            #'filename': LOG_ROOT + 'osaamisportaali.log',
            #'when': 'midnight',
        #}
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
        'propagate': True,
    }
}

try:
    from .local_settings import *
except ImportError as e:
    print ("error importing local settings:", e)

if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []

